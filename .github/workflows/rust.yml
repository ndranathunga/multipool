name: Rust CI

on:
  push:
    branches:
      - "**" # Run for all branches on commit
  pull_request:
    branches:
      - "**" # Run for all pull requests

jobs:
  msrv:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # Test on both Linux and Windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust (MSRV)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.78.0
          override: true

      - name: Build and Test
        run: |
          cargo build --release
          cargo test

      - name: Run Benchmarks
        run: cargo bench --features bench

      # Parse benchmark results from target/criterion directories
      - name: Parse Benchmark Results
        run: |
          # We will use Node.js to parse and gather the benchmark data.
          # Install glob for easier file matching
          npm install glob
        shell: bash

      - name: Create Consolidated Benchmark Results
        id: create_results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const glob = require('glob');

            // Find all estimates.json files in the "new" directories
            // Ignore "report" directories
            const files = glob.sync('target/criterion/**/new/estimates.json', { ignore: '**/report/**' });

            const benchmarks = [];
            for (const file of files) {
              const estimates = JSON.parse(fs.readFileSync(file, 'utf8'));
              // The benchmark name can be derived from the directory structure
              // e.g. target/criterion/<group>/<test>/new/estimates.json
              // We'll use the part after 'target/criterion/' and before '/new'
              const relativePath = file.substring('target/criterion/'.length, file.indexOf('/new/'));
              // This might give something like "global_queue/global_queue_10k_tasks"
              const benchmarkName = relativePath.replace(/\\/g, '/'); // Ensure forward slashes even on Windows

              // Extract the mean estimate (e.g., nanoseconds)
              const mean_ns = estimates.mean ? estimates.mean.point_estimate : null;
              if (mean_ns !== null) {
                benchmarks.push({
                  name: benchmarkName,
                  value: mean_ns,
                  unit: "ns"
                });
              }
            }

            fs.mkdirSync('bench_results', { recursive: true });
            fs.writeFileSync('bench_results/results.json', JSON.stringify(benchmarks, null, 2));
            return { benchmarks };

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: bench_results/results.json

      - name: Post Benchmark Results on Pull Requests
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('bench_results/results.json', 'utf8');
            const benchmarks = JSON.parse(results);

            // Create a Markdown table
            const header = "| Benchmark Name | Value (ns) | Unit |\n|---|---|---|";
            const rows = benchmarks.map(b => `| ${b.name} | ${b.value} | ${b.unit} |`).join('\n');
            const table = `${header}\n${rows}`;

            const comment = `### Benchmark Results\n${table}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Display Benchmark Results in Logs
        if: github.event_name != 'pull_request'
        run: |
          echo "### Benchmark Results"
          cat bench_results/results.json

  latest:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Latest Stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and Test
        run: |
          cargo build --release
          cargo test

      - name: Run Benchmarks
        run: cargo bench --features bench

      - name: Parse Benchmark Results
        run: |
          npm install glob
        shell: bash

      - name: Create Consolidated Benchmark Results
        id: create_results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const glob = require('glob');

            const files = glob.sync('target/criterion/**/new/estimates.json', { ignore: '**/report/**' });

            const benchmarks = [];
            for (const file of files) {
              const estimates = JSON.parse(fs.readFileSync(file, 'utf8'));
              const relativePath = file.substring('target/criterion/'.length, file.indexOf('/new/'));
              const benchmarkName = relativePath.replace(/\\/g, '/');
              const mean_ns = estimates.mean ? estimates.mean.point_estimate : null;
              if (mean_ns !== null) {
                benchmarks.push({
                  name: benchmarkName,
                  value: mean_ns,
                  unit: "ns"
                });
              }
            }

            fs.mkdirSync('bench_results', { recursive: true });
            fs.writeFileSync('bench_results/results.json', JSON.stringify(benchmarks, null, 2));
            return { benchmarks };

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: bench_results/results.json

      - name: Post Benchmark Results on Pull Requests
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('bench_results/results.json', 'utf8');
            const benchmarks = JSON.parse(results);

            const header = "| Benchmark Name | Value (ns) | Unit |\n|---|---|---|";
            const rows = benchmarks.map(b => `| ${b.name} | ${b.value} | ${b.unit} |`).join('\n');
            const table = `${header}\n${rows}`;

            const comment = `### Benchmark Results\n${table}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Display Benchmark Results in Logs
        if: github.event_name != 'pull_request'
        run: |
          echo "### Benchmark Results"
          cat bench_results/results.json
